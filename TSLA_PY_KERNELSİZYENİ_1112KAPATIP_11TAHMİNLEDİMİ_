# import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
# from sklearn.model_selection import cross_val_score
# from sklearn.model_selection import KFold
# from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense
# from tensorflow.python.keras.wrappers.scikit_learn import KerasRegressor

df_from_csv_TSLA = pd.read_csv('TSLA_1YEAR_till120221.csv',sep='\s*,\s*',engine='python')

def mydatetimeconverter(stringdate):
    datetime_from_string = stringdate.replace(',','')
    return pd.to_datetime(datetime_from_string)

def mymonetaryconverter(monetary):
    new_monetary = monetary.replace(',','').replace('$','')
    return float(new_monetary)

# def mymonetaryconverter_for_Low(monetary_Low):
#    new_monetary_Low = monetary_Low.replace(',','').replace('$','').replace(';','')
#    return float(new_monetary_Low)

# We do the required conversions for "Date","Close/Last","Open","High" and "Low;;;;;" columns.
df_from_csv_TSLA["Date"] = df_from_csv_TSLA["Date"].apply(mydatetimeconverter)
df_from_csv_TSLA["Volume"] = df_from_csv_TSLA["Volume"].astype('float')
df_from_csv_TSLA["Close/Last"] = df_from_csv_TSLA["Close/Last"].apply(mymonetaryconverter)
df_from_csv_TSLA["Open"] = df_from_csv_TSLA["Open"].apply(mymonetaryconverter)
df_from_csv_TSLA["High"] = df_from_csv_TSLA["High"].apply(mymonetaryconverter)
df_from_csv_TSLA["Low"] = df_from_csv_TSLA["Low"].apply(mymonetaryconverter)
# df_from_csv_TSLA["Low;;;;;"] = df_from_csv_TSLA["Low;;;;;"].apply(mymonetaryconverter_for_Low)

# Then we create a new DataFrame which contains "Date","Close/Last","Open","High" and "Low;;;;;" columns converted and we call it "converted_dataframe".
converted_dataframe_TSLA = pd.DataFrame(df_from_csv_TSLA[["Date","Close/Last","Volume","Open","High","Low"]])
# We create one more DataFrame other than "converted_dataframe" getting all the columns except "Date" column and call it "converted_dataframe_for_model"
# Because "Date" column won't be appropriate to use in the neural network model as it doesn't have a numerical data format like float, integer etc.
# So we will use the below "converted_dataframe_for_model" in our neural network model.
converted_dataframe_for_model_TSLA = pd.DataFrame(converted_dataframe_TSLA[["Close/Last","Volume","Open","High","Low"]])
# print(converted_dataframe_for_model_TSLA)

converted_dataframe_for_model_TSLA = converted_dataframe_for_model_TSLA.drop(labels=[0,1])

array_from_converted_dataframe_for_model_TSLA = converted_dataframe_for_model_TSLA.to_numpy()
X_TSLA = array_from_converted_dataframe_for_model_TSLA[:,1:]
y_TSLA = array_from_converted_dataframe_for_model_TSLA[:,0]

y_TSLA = np.reshape(y_TSLA,(-1,1))
scaler_X_TSLA = MinMaxScaler()
scaler_y_TSLA = MinMaxScaler()

print(scaler_X_TSLA.fit(X_TSLA))
XSCALE_TSLA = scaler_X_TSLA.transform(X_TSLA)
print(scaler_y_TSLA.fit(y_TSLA))
ySCALE_TSLA = scaler_y_TSLA.transform(y_TSLA)

train_XSCALE_TSLA,test_XSCALE_TSLA,train_ySCALE_TSLA,test_ySCALE_TSLA = train_test_split(XSCALE_TSLA,ySCALE_TSLA,test_size=0.20,train_size=0.80)


artificialneuralnetwork_sym_TSLA = Sequential()
artificialneuralnetwork_sym_TSLA.add(Dense(4,input_shape=(251,4),activation='relu'))
artificialneuralnetwork_sym_TSLA.add(Dense(4,activation='relu'))
artificialneuralnetwork_sym_TSLA.add(Dense(1,activation='linear'))

artificialneuralnetwork_sym_TSLA.compile(loss='mse',optimizer='rmsprop',metrics=['mse'])

artificialneuralnetwork_sym_TSLA.fit(train_XSCALE_TSLA,train_ySCALE_TSLA,epochs=319,batch_size=251)

loss,meansquarederror = artificialneuralnetwork_sym_TSLA.evaluate(test_XSCALE_TSLA,test_ySCALE_TSLA)
print("Kayıp Fonksiyonu değeri(loss) ve Ortalama Kare Hata metriği(meansquarederror) değeri :\n", loss,meansquarederror)


# WHEN OUR XtoPredict CONSISTS OF ONLY ONE SAMPLE:
XtoPredict_TSLA = np.array([[21622750,812.44,829.8799,801.725]])

for i in XtoPredict_TSLA[0]:
    if i == 0:
       XtoPredict_TSLA[0,i] = XtoPredict_TSLA[0,i].astype('float')
    break
print(XtoPredict_TSLA)


"""
# WHEN OUR XtoPredict CONSISTS OF MORE THAN ONE SAMPLES:
XtoPredict_TSLA = np.array([[15751060,244.78,245.15,242.15],[16561080,243.933,245.3,242.73]])

for i in XtoPredict_TSLA[:]:
    for j in i:
       while j == 0:
            XtoPredict_TSLA[i,j] = XtoPredict_TSLA[i,j].astype('float')

#print(XtoPredict_TSLA)
"""

XtoPredict_TSLA = scaler_X_TSLA.transform(XtoPredict_TSLA)
y_Predicted_TSLA = artificialneuralnetwork_sym_TSLA.predict(XtoPredict_TSLA)
y_Predicted_TSLA = scaler_y_TSLA.inverse_transform(y_Predicted_TSLA)
XtoPredict_TSLA = scaler_X_TSLA.inverse_transform(XtoPredict_TSLA)
print("XtoPredict_TSLA= %s,y_Predicted_TSLA=%s" % (XtoPredict_TSLA[0],y_Predicted_TSLA[0]))
