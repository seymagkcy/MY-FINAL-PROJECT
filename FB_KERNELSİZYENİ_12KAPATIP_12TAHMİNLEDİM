# import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
# from sklearn.model_selection import cross_val_score
# from sklearn.model_selection import KFold
# from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense
# from tensorflow.python.keras.wrappers.scikit_learn import KerasRegressor


df_from_csv_FB = pd.read_csv('FB_1YEAR_till120221.csv',sep='\s*,\s*',engine='python')
def mydatetimeconverter(stringdate):
    datetime_from_string = stringdate.replace(',','')
    return pd.to_datetime(datetime_from_string)

def mymonetaryconverter(monetary):
    new_monetary = monetary.replace(',','').replace('$','')
    return float(new_monetary)

# def mymonetaryconverter_for_Low(monetary_Low):
#    new_monetary_Low = monetary_Low.replace(',','').replace('$','').replace(';','')
#    return float(new_monetary_Low)

# We do the required conversions for "Date","Close/Last","Open","High" and "Low;;;;;" columns.
df_from_csv_FB["Date"] = df_from_csv_FB["Date"].apply(mydatetimeconverter)
df_from_csv_FB["Volume"] = df_from_csv_FB["Volume"].astype('float')
df_from_csv_FB["Close/Last"] = df_from_csv_FB["Close/Last"].apply(mymonetaryconverter)
df_from_csv_FB["Open"] = df_from_csv_FB["Open"].apply(mymonetaryconverter)
df_from_csv_FB["High"] = df_from_csv_FB["High"].apply(mymonetaryconverter)
df_from_csv_FB["Low"] = df_from_csv_FB["Low"].apply(mymonetaryconverter)
# df_from_csv_FB["Low;;;;;"] = df_from_csv_FB["Low;;;;;"].apply(mymonetaryconverter_for_Low)

# Then we create a new DataFrame which contains "Date","Close/Last","Open","High" and "Low;;;;;" columns converted and we call it "converted_dataframe".
converted_dataframe_FB = pd.DataFrame(df_from_csv_FB[["Date","Close/Last","Volume","Open","High","Low"]])
# We create one more DataFrame other than "converted_dataframe" getting all the columns except "Date" column and call it "converted_dataframe_for_model"
# Because "Date" column won't be appropriate to use in the neural network model as it doesn't have a numerical data format like float, integer etc.
# So we will use the below "converted_dataframe_for_model" in our neural network model.
converted_dataframe_for_model_FB = pd.DataFrame(converted_dataframe_FB[["Close/Last","Volume","Open","High","Low"]])
# print(converted_dataframe_for_model_MSFT)

converted_dataframe_for_model_FB = converted_dataframe_for_model_FB.drop(labels=[0])

array_from_converted_dataframe_for_model_FB = converted_dataframe_for_model_FB.to_numpy()
X_FB = array_from_converted_dataframe_for_model_FB[:,1:]
y_FB = array_from_converted_dataframe_for_model_FB[:,0]

y_FB = np.reshape(y_FB,(-1,1))
scaler_X_FB = MinMaxScaler()
scaler_y_FB = MinMaxScaler()

print(scaler_X_FB.fit(X_FB))
XSCALE_FB = scaler_X_FB.transform(X_FB)
print(scaler_y_FB.fit(y_FB))
ySCALE_FB = scaler_y_FB.transform(y_FB)

train_XSCALE_FB,test_XSCALE_FB,train_ySCALE_FB,test_ySCALE_FB = train_test_split(XSCALE_FB,ySCALE_FB,test_size=0.20,train_size=0.80)


artificialneuralnetwork_sym_FB = Sequential()
artificialneuralnetwork_sym_FB.add(Dense(4,input_shape=(252,4),activation='relu'))
artificialneuralnetwork_sym_FB.add(Dense(4,activation='relu'))
artificialneuralnetwork_sym_FB.add(Dense(1,activation='linear'))

artificialneuralnetwork_sym_FB.compile(loss='mse',optimizer='rmsprop',metrics=['mse'])

artificialneuralnetwork_sym_FB.fit(train_XSCALE_FB,train_ySCALE_FB,epochs=183,batch_size=1)

loss,meansquarederror = artificialneuralnetwork_sym_FB.evaluate(test_XSCALE_FB,test_ySCALE_FB)
print("Kayıp Fonksiyonu değeri(loss) ve Ortalama Kare Hata metriği(meansquarederror) değeri :\n", loss,meansquarederror)


# WHEN OUR XtoPredict CONSISTS OF ONLY ONE SAMPLE:
XtoPredict_FB = np.array([[9097597,270.52,271.18,268.34]])

for i in XtoPredict_FB[0]:
    if i == 0:
       XtoPredict_FB[0,i] = XtoPredict_FB[0,i].astype('float')
    break
print(XtoPredict_FB)


"""
# WHEN OUR XtoPredict CONSISTS OF MORE THAN ONE SAMPLES:
XtoPredict_FB = np.array([[15751060,244.78,245.15,242.15],[16561080,243.933,245.3,242.73]])

for i in XtoPredict_FB[:]:
    for j in i:
       while j == 0:
            XtoPredict_FB[i,j] = XtoPredict_FB[i,j].astype('float')

#print(XtoPredict_FB)
"""

XtoPredict_FB = scaler_X_FB.transform(XtoPredict_FB)
y_Predicted_FB = artificialneuralnetwork_sym_FB.predict(XtoPredict_FB)
y_Predicted_FB = scaler_y_FB.inverse_transform(y_Predicted_FB)
XtoPredict_FB = scaler_X_FB.inverse_transform(XtoPredict_FB)
print("XtoPredict_FB= %s,y_Predicted_FB=%s" % (XtoPredict_FB[0],y_Predicted_FB[0]))
